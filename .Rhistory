LDtable(ldt) # graphical color-coded table
38 summary.genotype
LDplot(ldt, distance=c(124, 834, 927)) # LD plot vs distance
# more markers makes prettier plots!
data <- list()
nobs <- 1000
ngene <- 20
s <- seq(0,1,length=ngene)
a1 <- a2 <- matrix("", nrow=nobs, ncol=ngene)
for(i in 1:length(s) )
{
rallele <- function(p) sample( c("A","T"), 1, p=c(p, 1-p))
if(i==1)
{
a1[,i] <- sample( c("A","T"), 1000, p=c(0.5,0.5), replace=TRUE)
a2[,i] <- sample( c("A","T"), 1000, p=c(0.5,0.5), replace=TRUE)
}
else
{
p1 <- pmax( pmin( 0.25 + s[i] * as.numeric(a1[,i-1]=="A"),1 ), 0 )
p2 <- pmax( pmin( 0.25 + s[i] * as.numeric(a2[,i-1]=="A"),1 ), 0 )
a1[,i] <- sapply(p1, rallele )
a2[,i] <- sapply(p2, rallele )
}
data[[paste("G",i,sep="")]] <- genotype(a1[,i],a2[,i])
}
data <- data.frame(data)
data <- makeGenotypes(data)
ldt <- LD(data)
plot(ldt, digits=2, marker=19) # do LDtable & LDplot on in a single
# graphics window
example.data   <- c("D/D","D/I","D/D","I/I","D/D",
"D/D","D/D","D/D","I/I","")
g1  <- genotype(example.data)
g1
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/D","I/I","I/I","")
g1  <- genotype(example.data)
g1
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
g1  <- genotype(example.data)
g1
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","D/D","I/I","")
g1  <- genotype(example.data)
g1
example.data   <- c("D/D","D/I","I/D","I/I","D/D",
"D/D","D/I","I/D","I/I","")
summary(genotype(example.data))
genotypeOrder(genotype(example.data))
str(g1)
#minor allele=I
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","D/D","I/I","")
g1  <- genotype(example.data)
g1
str(g1)
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
#minor allele=D
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
g1  <- genotype(example.data)
g1
str(g1)
#minor allele=D
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
g1  <- genotype(example.data, alleles="rs123")
g1
#minor allele=D
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
g1  <- genotype(example.data, alleles=c("I","D"), reorder="yes")
g1
str(g1)
x <- c("C/C", "A/C", "A/A", NA, "C/B", "B/A", "B/B", "B/C", "A/C")
alleles <- c("A", "B", "C")
g <- genotype(x, alleles=alleles, reorder="yes")
str(g)
x <- c("C/C", "A/C", "A/A", NA, "C/B", "B/A", "B/B", "B/C", "A/C")
alleles <- c("C", "B", "A")
g <- genotype(x, alleles=alleles, reorder="yes")
str(g)
#minor allele=D
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
g1  <- genotype(example.data, alleles=c("I","D"), reorder="yes")
g1
str(g1)
#minor allele=D
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","I/I","I/I","")
g1  <- genotype(example.data, alleles=c("D","I"), reorder="yes")
g1
str(g1)
#minor allele=I
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","D/D","I/I","")
g1  <- genotype(example.data, alleles=c("D", "I"), reorder = "yes")
g1
str(g1)
#minor allele=I
example.data   <- c("D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","D/D","I/I","")
g1  <- genotype(example.data, alleles=c("I", "D"), reorder = "yes")
g1
str(g1)
example.data   <- c("I/I","D/D","D/I","I/D","I/I","D/D",
"D/D","D/I","I/D","")
summary(genotype(example.data))
#minor allele=I
example.data   <- c("I/I","D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","D/D","")
g1  <- genotype(example.data, alleles=c("I", "D"), reorder = "yes")
g1
str(g1)
#minor allele=I
example.data   <- c("I/I","D/D","D/I","I/I","I/I","D/D",
"D/D","D/I","D/D","")
g1  <- genotype(example.data, alleles=c("D", "I"), reorder = "yes")
g1
str(g1)
data(SNPs)
library(SNPassoc)
install.packages("genetics")
library(SNPassoc)
data(SNPs)
dominant(snp(SNPs$snp10001,sep=""))
additive(snp(SNPs$snp10001,sep=""))
data(SNPs)
SNPs
SNPs$snp10001
additive(snp(SNPs$snp10001,sep=""))
years<-c("20 years old", "1 years old")
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("([0-9]+).*$", "\\1", years))
years<-c("20 years 3 old", "1 years old")
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("([0-9]+).*$", "\\1", years))
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("^\[([0-9]+).*$", "\\1", years))
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("^(\[)([0-9]+).*$", "\\1", years))
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("([0-9]+).*$", "\\1", years))
years<-c("[0.0054-0.124] years decrease", "[0.088-0.212] years increase")
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("([0-9]+).*$", "\\1", years))
years<-c("[0.0054-0.124] years decrease", "[0.088-0.212] years increase")
# pattern is by finding a set of numbers in the start and capturing them
as.numeric(gsub("([0-9]+).*$", "\\1", years))
m <- gregexpr('[0-9]+','Ab_Cd-001234.txt')
regmatches('Ab_Cd-001234.txt',m)
m <- gregexpr('[0-9]+','Ab_Cd-001234.txt')
m
confint <- c("[0.741 ; 2.233]", "[263.917 ; 402.154]", "[12.788 ; 17.975]", "[0.680 ; 2.450]", "[0.650 ; 1.827]", "[0.719 ; 2.190]")
lower =  as.numeric(sub(".*?(\\d+\\.\\d+).*", "\\1", confint))
upper =  as.numeric(sub(".*\\b(\\d+\\.\\d+).*", "\\1", confint))
lower
lower
upper
confint <- c("[0.741-2.233] year increase", "[263.917 ; 402.154]", "[12.788 ; 17.975]", "[0.680 ; 2.450]", "[0.650 ; 1.827]", "[0.719 ; 2.190]")
lower =  as.numeric(sub(".*?(\\d+\\.\\d+).*", "\\1", confint))
upper =  as.numeric(sub(".*\\b(\\d+\\.\\d+).*", "\\1", confint))
lower
upper
data(ExampleData)
install.packages("PredictABEL")
library(PredictABEL)
data(ExampleData)
# specify column numbers of genetic predictors
cGenPred <- c(11:16)
# fit a logistic regression model
# all steps needed to construct a logistic regression model are written in a function
# called 'ExampleModels', which is described on page 4-5
riskmodel <- ExampleModels()$riskModel2
# compute unweighted risk scores
riskScore <- riskScore(weights=riskmodel, data=ExampleData,
cGenPreds=cGenPred, Type="unweighted")
# compute unweighted risk scores
riskScore <- riskScore(weights=riskmodel, data=ExampleData,
cGenPreds=cGenPred, Type="unweighted")
## R Markdown
head(riskScore)
cGenPred
?substr
substr("abcdef", 2, 4)
vec<-"abcdef"
substr(vec, length(vec)-1, length(vec))
substr(vec, length(vec), length(vec))
substr(vec, length(vec)-3, length(vec))
test<-"abcdef"
substr(test, length(test)-3, length(test))
length(test)
l<-length(test)
l<-nchar(test)
substr(test, nchar(test)-1, nchar(test))
substr(test, nchar(test), nchar(test))
#childbirth
library(forestplot)
estimator <-
structure(list(
mean  = c(NA, 0.97, 0.80, 2.17, 0.85, 0.69, 0.86),
lower = c(NA, 0.40, 0.51, 0.90, 0.56, 0.41, 0.68),
upper = c(NA, 2.30, 1.28, 5.25, 1.31, 1.17, 1.07)),
Names = c("Estimate", "lower", "upper"),
row.names = c(NA, -7L),
class = "data.frame")
tabletext<-list(
list("Study Sites", "Aichi", "GEL1", "Jiangsu", "MEC", "SCHS", expression(bold("Summary ( " * I^2 * "=50.25%)"))),
list("# Cases", "185", "324", "887", "499", "344", "1,964"),
list("# Controls", "185", "763", "2,252", "998", "688", "4,336"),
list("OR (95% CI)", "0.97(0.40, 2.30)", "0.80(0.51, 1.28)", "2.17(0.90, 5.25)", "0.85(0.56, 1.31)", "0.69(0.41, 1.17)", "0.86(0.68, 1.07)")
)
options(scipen=5)
forestplot(tabletext,
lineheight = unit(0.4, "inches"),
line.margin = unit(0, "inches"),
colgap = unit(0.3, "inches"),
txt_gp = fpTxtGp(ticks = gpar(fontfamily="", cex=0.8)),# increased the size of tick values
xlog=TRUE,
zero=1,
xticks.digits=1,
xticks = c(0.1, 0.25, 0.5, 1, 2, 4, 10),
hrzl_lines = list("2" = gpar(lty=1), "7" = gpar(lty=2, lwd=1, columns=1:4, col = "#000044")),
title = "Lung cancer by childbirth (ever vs never)",
new_page = TRUE,
estimator,
is.summary=c(TRUE,rep(FALSE,5),TRUE),
clip=c(0.1, 5),
col=fpColors(box="royalblue",line="darkblue", summary="royalblue"),
vertices=TRUE,
boxsize=0.01*c(NA, 7.275679787, 30.19584376, 11.03667224, 21.83316157, 29.65864264, 150),# add the multiples of the inverse variance weights to reflect the weights in graph
graphwidth = unit(2, "inches")
)
#childbirth
library(forestplot)
estimator <-
structure(list(
mean  = c(NA, 0.97, 0.80, 2.17, 0.85, 0.69, 0.86),
lower = c(NA, 0.40, 0.51, 0.90, 0.56, 0.41, 0.68),
upper = c(NA, 2.30, 1.28, 5.25, 1.31, 1.17, 1.07)),
Names = c("Estimate", "lower", "upper"),
row.names = c(NA, -7L),
class = "data.frame")
tabletext<-list(
list("Study Sites", "Aichi", "GEL1", "Jiangsu", "MEC", "SCHS", expression(bold("Summary ( " * I^2 * "=50.25%)"))),
list("# Cases", "185", "324", "887", "499", "344", "2,239"),
list("# Controls", "185", "763", "2,252", "998", "688", "4,886"),
list("OR (95% CI)", "0.97(0.40, 2.30)", "0.80(0.51, 1.28)", "2.17(0.90, 5.25)", "0.85(0.56, 1.31)", "0.69(0.41, 1.17)", "0.86(0.68, 1.07)")
)
options(scipen=5)
forestplot(tabletext,
lineheight = unit(0.4, "inches"),
line.margin = unit(0, "inches"),
colgap = unit(0.3, "inches"),
txt_gp = fpTxtGp(ticks = gpar(fontfamily="", cex=0.8)),# increased the size of tick values
xlog=TRUE,
zero=1,
xticks.digits=1,
xticks = c(0.1, 0.25, 0.5, 1, 2, 4, 10),
hrzl_lines = list("2" = gpar(lty=1), "7" = gpar(lty=2, lwd=1, columns=1:4, col = "#000044")),
title = "Lung cancer by childbirth (ever vs never)",
new_page = TRUE,
estimator,
is.summary=c(TRUE,rep(FALSE,5),TRUE),
clip=c(0.1, 5),
col=fpColors(box="royalblue",line="darkblue", summary="royalblue"),
vertices=TRUE,
boxsize=0.01*c(NA, 7.275679787, 30.19584376, 11.03667224, 21.83316157, 29.65864264, 150),# add the multiples of the inverse variance weights to reflect the weights in graph
graphwidth = unit(2, "inches")
)
#childbirth
library(forestplot)
estimator <-
structure(list(
mean  = c(NA, 0.97, 0.80, 2.17, 0.85, 0.69, 0.86),
lower = c(NA, 0.40, 0.51, 0.90, 0.56, 0.41, 0.68),
upper = c(NA, 2.30, 1.28, 5.25, 1.31, 1.17, 1.07)),
Names = c("Estimate", "lower", "upper"),
row.names = c(NA, -7L),
class = "data.frame")
tabletext<-list(
list("Study Sites", "Aichi", "GEL1", "Jiangsu", "MEC", "SCHS", expression(bold("Summary ( " * I^2 * "=50.25%)"))),
list("# Cases", "185", "324", "887", "499", "344", "2,239"),
list("# Controls", "185", "763", "2,252", "998", "688", "4,886"),
list("OR (95% CI)", "0.97(0.40, 2.30)", "0.80(0.51, 1.28)", "2.17(0.90, 5.25)", "0.85(0.56, 1.31)", "0.69(0.41, 1.17)", "0.86(0.68, 1.07)")
)
options(scipen=5)
forestplot(tabletext,
lineheight = unit(0.4, "inches"),
line.margin = unit(0, "inches"),
colgap = unit(0.3, "inches"),
txt_gp = fpTxtGp(ticks = gpar(fontfamily="", cex=0.8)),# increased the size of tick values
xlog=TRUE,
zero=1,
xticks.digits=1,
xticks = c(0.1, 0.25, 0.5, 1, 2, 4, 10),
hrzl_lines = list("2" = gpar(lty=1), "7" = gpar(lty=2, lwd=1, columns=1:4, col = "#000044")),
title = "Lung cancer by childbirth (ever vs never)",
new_page = TRUE,
estimator,
is.summary=c(TRUE,rep(FALSE,5),TRUE),
clip=c(0.1, 5),
col=fpColors(box="royalblue",line="darkblue", summary="royalblue"),
vertices=TRUE,
boxsize=0.01*c(NA, 7.275679787, 30.19584376, 11.03667224, 21.83316157, 29.65864264, 150),# add the multiples of the inverse variance weights to reflect the weights in graph
graphwidth = unit(2, "inches")
)
#menopausal status
library(forestplot)
estimator <-
structure(list(
mean  = c(NA, 1.22, 0.92, 0.97, 1.17, 1.34, 1.07),
lower = c(NA, 0.51, 0.58, 0.73, 0.67, 0.77, 0.89),
upper = c(NA, 2.91, 1.45, 1.30, 2.03, 2.35, 1.28)),
Names = c("Estimate", "lower", "upper"),
row.names = c(NA, -7L),
class = "data.frame")
tabletext<-list(
list("Study Sites", "Aichi", "GEL1", "Jiangsu", "MEC", "SCHS", expression(bold("Summary ( " * I^2 * "=0.00%)"))),
list("# Cases", "185", "324", "887", "499", "344", "2,239"),
list("# Controls", "185", "763", "2,252", "998", "688", "4,886"),
list("OR (95% CI)", "1.22(0.51, 2.91)", "0.92(0.58, 1.45)", "0.97(0.73, 1.30)", "1.17(0.67, 2.03)", "1.34(0.77, 2.35)", "1.07(0.89, 1.28)")
)
options(scipen=5)
forestplot(tabletext,
lineheight = unit(0.4, "inches"),
line.margin = unit(0, "inches"),
colgap = unit(0.3, "inches"),
txt_gp = fpTxtGp(ticks = gpar(fontfamily="", cex=0.8)),
xlog=TRUE,
zero=1,
xticks.digits=1,
xticks = c(0.1, 0.25, 0.5, 1, 2, 4, 10),
hrzl_lines = list("2" = gpar(lty=1), "7" = gpar(lty=2, lwd=1, columns=1:4, col = "#000044")),
title = "Lung cancer by menopausal status (yes vs no)",
new_page = TRUE,
estimator,
is.summary=c(TRUE,rep(FALSE,5),TRUE),
clip=c(0.1, 5),
col=fpColors(box="royalblue",line="darkblue", summary="royalblue"),
vertices=TRUE,
boxsize=0.01*c(NA, 5.379911416, 19.464171, 48.92261485, 13.23968496, 12.99361778, 150),# add the multiples of the inverse variance weights to reflect the weights in graph
graphwidth = unit(2, "inches")
)
#OcEver
library(forestplot)
estimator <-
structure(list(
mean  = c(NA, 0.16, 0.49, 0.81, 0.36, 0.78, 0.73),
lower = c(NA, 0.03, 0.32, 0.59, 0.19, 0.53, 0.61),
upper = c(NA, 0.90, 0.75, 1.11, 0.69, 1.16, 0.86)),
Names = c("Estimate", "lower", "upper"),
row.names = c(NA, -7L),
class = "data.frame")
tabletext<-list(
list("Study Sites", "Aichi", "Jiangsu", "NJLCS", "SCHS", "MEC", expression(bold("Summary ( " * I^2 * "=64.49%)"))),
list("# Cases", "185", "887", "499", "217", "344", "2,132"),
list("# Controls", "185", "2,252", "998", "456", "688", "4,579"),
list("OR (95% CI)", "0.16(0.03, 0.90)", "0.49(0.32, 0.75)", "0.81(0.59, 1.11)", "0.36(0.19, 0.69)", "0.78(0.53, 1.16)", "0.73(0.61, 0.86)")
)
options(scipen=5)
forestplot(tabletext,
lineheight = unit(0.4, "inches"),
line.margin = unit(0, "inches"),
colgap = unit(0.3, "inches"),
txt_gp = fpTxtGp(ticks = gpar(fontfamily="", cex=0.8)),
xlog=TRUE,
zero=1,
xticks.digits=1,
xticks = c(0.1, 0.25, 0.5, 1, 2, 4, 8, 16),
hrzl_lines = list("2" = gpar(lty=1), "7" = gpar(lty=2, lwd=1, columns=1:4, col = "#000044")),
title = "Lung cancer by oral contraceptives use (ever vs never)",
new_page = TRUE,
estimator,
is.summary=c(TRUE,rep(FALSE,5),TRUE),
clip=c(0.1, 5),
col=fpColors(box="royalblue",line="darkblue", summary="royalblue"),
vertices=TRUE,
boxsize=0.01*c(NA, 1.31643434, 22.59494108, 40.32855991, 9.72800081, 26.03206386, 150),# add the multiples of the inverse variance weights to reflect the weights in graph
graphwidth = unit(2, "inches")
)
#OcEver
library(forestplot)
estimator <-
structure(list(
mean  = c(NA, 0.16, 0.49, 0.81, 0.36, 0.78, 0.73),
lower = c(NA, 0.03, 0.32, 0.59, 0.19, 0.53, 0.61),
upper = c(NA, 0.90, 0.75, 1.11, 0.69, 1.16, 0.86)),
Names = c("Estimate", "lower", "upper"),
row.names = c(NA, -7L),
class = "data.frame")
tabletext<-list(
list("Study Sites", "Aichi", "Jiangsu", "NJLCS", "SCHS", "MEC", expression(bold("Summary ( " * I^2 * "=64.49%)"))),
list("# Cases", "185", "887", "499", "217", "344", "2,132"),
list("# Controls", "185", "2,252", "998", "456", "688", "4,579"),
list("OR (95% CI)", "0.16(0.03, 0.90)", "0.49(0.32, 0.75)", "0.81(0.59, 1.11)", "0.36(0.19, 0.69)", "0.78(0.53, 1.16)", "0.73(0.61, 0.86)")
)
options(scipen=5)
forestplot(tabletext,
lineheight = unit(0.4, "inches"),
line.margin = unit(0, "inches"),
colgap = unit(0.3, "inches"),
txt_gp = fpTxtGp(ticks = gpar(fontfamily="", cex=0.8)),
xlog=TRUE,
zero=1,
xticks.digits=1,
xticks = c(0.1, 0.25, 0.5, 1, 2, 4, 10),
hrzl_lines = list("2" = gpar(lty=1), "7" = gpar(lty=2, lwd=1, columns=1:4, col = "#000044")),
title = "Lung cancer by oral contraceptives use (ever vs never)",
new_page = TRUE,
estimator,
is.summary=c(TRUE,rep(FALSE,5),TRUE),
clip=c(0.1, 5),
col=fpColors(box="royalblue",line="darkblue", summary="royalblue"),
vertices=TRUE,
boxsize=0.01*c(NA, 1.31643434, 22.59494108, 40.32855991, 9.72800081, 26.03206386, 150),# add the multiples of the inverse variance weights to reflect the weights in graph
graphwidth = unit(2, "inches")
)
library(ggplot2)
## Loading and preprocessing the data
setwd("~/assignment")
data0<-read.csv(file="activity.csv")
str(data0)
head(data0)
## What is mean total number of steps taken per day?
### 1. Calculate the total number of steps taken per day
perday0<-aggregate(data0$steps, by=list(data0$date), sum) #compare with tapply: perday2<-tapply(data0$steps,data0$date, sum, na.rm=TRUE, simplify = FALSE) (aggregate gives a data frame, tapply gives by defalt a scalar, simplify=FALSE-->a list). ggplot only works on data frame
head(perday)
### 2. Make a histogram of the total number of steps taken each day
gperday0<-ggplot(perday0, aes(x))+geom_histogram(binwidth=1000, fill="dark grey")+labs(title = "Histogram of Daily Steps", x="Steps")+theme(plot.title = element_text(hjust = 0.5))+scale_y_discrete(name="Number of Days", limits=c(0,2,4,6,8))
gperday0
### 3. Calculate and report the mean and median total number of steps taken per day
mean(perday0$x, na.rm = T)
median(perday0$x, na.rm = T)
#### Answer: mean is 10766.19; median is 10765
## What is the average daily activity pattern?
### 1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
intervals<-aggregate(data0$steps, by=list(as.factor(data0$interval)), mean, na.rm=TRUE)
str(intervals)
head(intervals)
gintervals<-ggplot(intervals, aes(x=as.numeric(as.character(Group.1)), y=x))+geom_line(color="dark grey", size=1.5)+labs(title="Time Series Plot of 5-min Steps", x="Intervals", y="Steps")+theme(plot.title = element_text(hjust = 0.5))+scale_x_discrete(name="Intervals", limits=c(0, 300, 600, 900, 1200, 1500, 1800, 2100))
gintervals
### 2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
intervals[grep(max(intervals$x), intervals$x), 1]
#### Answer: Interval 835
## Imputing missing values
### 1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sum(is.na(data0$steps))
#### Answer: 2304 missing values
### 2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
data1steps<-data0$steps
for (i in 1:length(data0$steps)) {
if (is.na(data0$steps[i])) {
data1steps[i]<-intervals$x[which(intervals$Group.1==data0$interval[i])]
}
}
### 3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
data1<-data.frame("date"=data0$date, "interval"=data0$interval, "steps"=data1steps)
str(data1)
head(data1)
#### Answer:data1 is the dataset with missing values filled with mean of that 5-min interval.
### 4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
perday1<-aggregate(data1$steps, by=list(data1$date), sum)
gperday1<-ggplot(perday1, aes(x))+geom_histogram(binwidth=1000, fill="dark grey")+labs(title = "Histogram of Daily Steps (with Inputation)", x="Steps")+theme(plot.title = element_text(hjust = 0.5))+scale_y_discrete(name="Number of Days", limits=c(0,2,4,6,8))
gperday1
mean(perday1$x, na.rm = T)
median(perday1$x, na.rm = T)
#### Answer: Mean is 10766.19; median is 10766.19. Mean is exactly the same as complete case analysis; median is close. Imputation based on means will keep the same mean.
## Are there differences in activity patterns between weekdays and weekends?
### 1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
dayinweek<-weekdays(as.Date(as.character(data1$date)), abbreviate = TRUE)
weekday<-dayinweek
table(dayinweek)
for (i in 1:length(dayinweek)){
ifelse(dayinweek[i] %in% c("Mon", "Tue", "Wed", "Thu", "Fri"), weekday[i]<-"Weekday", weekday[i]<-"Weekend" )
}
str(weekday)
table(weekday)
weekday<-as.factor(weekday)
str(weekday)
data1$weekday<-weekday
View(data1)
intervals1weekday<-aggregate(data1$steps[which(weekday=="Weekday"),], by=list(as.factor(data1$interval)), mean, na.rm=TRUE)
intervals1weekday<-aggregate(data1$steps[which(weekday=="Weekday")], by=list(as.factor(data1$interval)), mean, na.rm=TRUE)
intervals1weekday<-aggregate(data1$steps[which(data1$weekday=="Weekday")], by=list(as.factor(data1$interval)), mean, na.rm=TRUE)
data1$steps[which(data1$weekday=="Weekday")]
intervals1weekday<-aggregate(data1$steps[which(data1$weekday=="Weekday")], by=list(as.factor(data1$interval)), mean, na.rm=TRUE)
test<-ata1$steps[which(data1$weekday=="Weekday")]
test<-data1$steps[which(data1$weekday=="Weekday")]
intervals1weekday<-aggregate(test, by=list(as.factor(data1$interval)), mean, na.rm=TRUE)
str(data1)
data1weekday<-data1[which(data1$weekday=="Weekday"),]
data1weekend<-data1[which(data1$weekday=="Weekend"),]
intervals1weekday<-aggregate(data1weekday$steps, by=list(as.factor(data1weekday$interval)), mean, na.rm=TRUE)
intervals1weekend<-aggregate(data1weekday$steps, by=list(as.factor(data1weekday$interval)), mean, na.rm=TRUE)
View(intervals1weekday)
View(intervals1weekend)
View(intervals1weekend)
intervals1panel<-rbind(intervals1weekday, intervals1weekend)
intervals1weekday$weekday<-"Weekday"
intervals1weekday<-aggregate(data1weekday$steps, by=list(as.factor(data1weekday$interval)), mean, na.rm=TRUE)
intervals1weekday$weekday<-"Weekday"
intervals1weekend<-aggregate(data1weekday$steps, by=list(as.factor(data1weekday$interval)), mean, na.rm=TRUE)
intervals1weekend$weekday<-"Weekend"
intervals1panel<-rbind(intervals1weekday, intervals1weekend)
intervals1panel$weekday<-as.factor(intervals1panel$weekday)
gintervals1<-ggplot(intervals1panel, aes(x=as.numeric(as.character(Group.1)), y=x)) + geom_line(color="dark grey", size=1.5)+facet_wrap(~weekday, nrow = 2, ncol=1)+labs(title="Time Series Plot of 5-min Steps (Imputed)", x="Intervals", y="Steps")+theme(plot.title = element_text(hjust = 0.5))+scale_x_discrete(name="Intervals", limits=c(0, 300, 600, 900, 1200, 1500, 1800, 2100))
gintervals1
